// ============================================
// DATA MANAGEMENT & SEARCH FUNCTIONALITY
// ============================================

(function() {
    'use strict';

    // Sample data - replace dengan actual data source
    let originalData = [
        {
            id: 1,
            kode: 'PRD001',
            nama: 'Laptop Dell XPS 13',
            kategori: 'Elektronik',
            status: 'active',
            tanggalUpdate: new Date('2025-01-15T10:30:00'),
            keterangan: 'Stok tersedia'
        },
        {
            id: 2,
            kode: 'PRD002',
            nama: 'Mouse Wireless Logitech',
            kategori: 'Aksesoris',
            status: 'active',
            tanggalUpdate: new Date('2025-01-16T14:20:00'),
            keterangan: 'Pre-order'
        },
        {
            id: 3,
            kode: 'PRD003',
            nama: 'Keyboard Mechanical RGB',
            kategori: 'Aksesoris',
            status: 'inactive',
            tanggalUpdate: new Date('2025-01-10T09:15:00'),
            keterangan: 'Habis'
        },
        {
            id: 4,
            kode: 'PRD004',
            nama: 'Monitor LG 27 inch 4K',
            kategori: 'Elektronik',
            status: 'active',
            tanggalUpdate: new Date('2025-01-17T16:45:00'),
            keterangan: 'Baru masuk'
        },
        {
            id: 5,
            kode: 'PRD005',
            nama: 'Headset Gaming Razer',
            kategori: 'Aksesoris',
            status: 'active',
            tanggalUpdate: new Date('2025-01-17T08:30:00'),
            keterangan: 'Limited edition'
        }
    ];

    let filteredData = [...originalData];
    let latestUpdateTime = null;

    // ============================================
    // UTILITY FUNCTIONS
    // ============================================

    /**
     * Format date to Indonesian locale
     * @param {Date} date - Date object to format
     * @returns {string} - Formatted date string
     */
    function formatDate(date) {
        if (!(date instanceof Date) || isNaN(date)) {
            return 'Invalid Date';
        }

        const options = {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false
        };

        return new Intl.DateTimeFormat('id-ID', options).format(date);
    }

    /**
     * Get relative time description
     * @param {Date} date - Date to compare
     * @returns {string} - Relative time string
     */
    function getRelativeTime(date) {
        const now = new Date();
        const diffMs = now - date;
        const diffMins = Math.floor(diffMs / 60000);
        const diffHours = Math.floor(diffMs / 3600000);
        const diffDays = Math.floor(diffMs / 86400000);

        if (diffMins < 1) return 'Baru saja';
        if (diffMins < 60) return `${diffMins} menit lalu`;
        if (diffHours < 24) return `${diffHours} jam lalu`;
        if (diffDays < 7) return `${diffDays} hari lalu`;
        return formatDate(date);
    }

    /**
     * Check if data is recently updated (within 24 hours)
     * @param {Date} date - Date to check
     * @returns {boolean}
     */
    function isRecentlyUpdated(date) {
        const now = new Date();
        const diffHours = (now - date) / 3600000;
        return diffHours < 24;
    }

    /**
     * Sort data by date (newest first)
     * @param {Array} data - Data array to sort
     * @returns {Array} - Sorted data array
     */
    function sortByDateDesc(data) {
        return data.sort((a, b) => {
            const dateA = new Date(a.tanggalUpdate);
            const dateB = new Date(b.tanggalUpdate);
            return dateB - dateA;
        });
    }

    /**
     * Get latest update time from data
     * @param {Array} data - Data array
     * @returns {Date|null} - Latest date or null
     */
    function getLatestUpdate(data) {
        if (!data || data.length === 0) return null;
        
        const sortedData = sortByDateDesc([...data]);
        return sortedData[0].tanggalUpdate;
    }

    // ============================================
    // DATA RENDERING
    // ============================================

    /**
     * Render table rows
     * @param {Array} data - Data to render
     */
    function renderTable(data) {
        const tableBody = document.getElementById('tableBody');
        const totalDataEl = document.getElementById('totalData');
        const lastUpdateEl = document.getElementById('lastUpdate');

        if (!tableBody) return;

        // Sort data by date (newest first)
        const sortedData = sortByDateDesc([...data]);

        // Update total data count
        if (totalDataEl) {
            totalDataEl.textContent = sortedData.length;
        }

        // Update last update time
        latestUpdateTime = getLatestUpdate(sortedData);
        if (lastUpdateEl && latestUpdateTime) {
            lastUpdateEl.textContent = getRelativeTime(latestUpdateTime);
        }

        // Clear table body
        tableBody.innerHTML = '';

        // Check if data is empty
        if (sortedData.length === 0) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="7" class="no-data">
                        ðŸ˜” Tidak ada data yang ditemukan
                    </td>
                </tr>
            `;
            return;
        }

        // Render each row
        sortedData.forEach((item, index) => {
            const row = document.createElement('tr');
            const isNew = isRecentlyUpdated(item.tanggalUpdate);
            
            row.innerHTML = `
                <td>${index + 1}</td>
                <td><strong>${escapeHtml(item.kode)}</strong></td>
                <td>
                    ${escapeHtml(item.nama)}
                    ${isNew ? '<span class="new-badge">BARU</span>' : ''}
                </td>
                <td>${escapeHtml(item.kategori)}</td>
                <td>
                    <span class="status-badge ${item.status === 'active' ? 'status-active' : 'status-inactive'}">
                        ${item.status === 'active' ? 'Aktif' : 'Nonaktif'}
                    </span>
                </td>
                <td>${formatDate(item.tanggalUpdate)}</td>
                <td>${escapeHtml(item.keterangan)}</td>
            `;

            tableBody.appendChild(row);
        });
    }

    /**
     * Escape HTML to prevent XSS
     * @param {string} text - Text to escape
     * @returns {string} - Escaped text
     */
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // ============================================
    // SEARCH FUNCTIONALITY
    // ============================================

    /**
     * Filter data based on search query
     * @param {string} query - Search query
     */
    function filterData(query) {
        const searchQuery = query.toLowerCase().trim();

        if (!searchQuery) {
            filteredData = [...originalData];
        } else {
            filteredData = originalData.filter(item => {
                return (
                    item.kode.toLowerCase().includes(searchQuery) ||
                    item.nama.toLowerCase().includes(searchQuery) ||
                    item.kategori.toLowerCase().includes(searchQuery) ||
                    item.status.toLowerCase().includes(searchQuery) ||
                    item.keterangan.toLowerCase().includes(searchQuery)
                );
            });
        }

        renderTable(filteredData);
    }

    /**
     * Debounce function to limit search frequency
     * @param {Function} func - Function to debounce
     * @param {number} wait - Wait time in ms
     * @returns {Function} - Debounced function
     */
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // ============================================
    // EVENT LISTENERS
    // ============================================

    /**
     * Initialize event listeners
     */
    function initEventListeners() {
        const searchInput = document.getElementById('searchInput');

        if (searchInput) {
            // Debounced search (300ms delay)
            const debouncedSearch = debounce((e) => {
                filterData(e.target.value);
            }, 300);

            searchInput.addEventListener('input', debouncedSearch);

            // Clear search on Escape key
            searchInput.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    searchInput.value = '';
                    filterData('');
                }
            });
        }
    }

    // ============================================
    // AUTO-REFRESH LAST UPDATE TIME
    // ============================================

    /**
     * Update relative time every minute
     */
    function startAutoRefresh() {
        setInterval(() => {
            const lastUpdateEl = document.getElementById('lastUpdate');
            if (lastUpdateEl && latestUpdateTime) {
                lastUpdateEl.textContent = getRelativeTime(latestUpdateTime);
            }
        }, 60000); // Update every 1 minute
    }

    // ============================================
    // INITIALIZATION
    // ============================================

    /**
     * Initialize application
     */
    function init() {
        // Sort original data by date
        originalData = sortByDateDesc(originalData);
        filteredData = [...originalData];

        // Render initial table
        renderTable(filteredData);

        // Setup event listeners
        initEventListeners();

        // Start auto-refresh for relative time
        startAutoRefresh();

        console.log('âœ… Table initialized successfully');
    }

    // ============================================
    // PUBLIC API (if needed for external access)
    // ============================================

    window.TableManager = {
        /**
         * Add new data to table
         * @param {Object} newData - New data object
         */
        addData: function(newData) {
            if (!newData.tanggalUpdate) {
                newData.tanggalUpdate = new Date();
            }
            originalData.unshift(newData);
            filterData(document.getElementById('searchInput')?.value || '');
        },

        /**
         * Update existing data
         * @param {number} id - Data ID to update
         * @param {Object} updates - Update object
         */
        updateData: function(id, updates) {
            const index = originalData.findIndex(item => item.id === id);
            if (index !== -1) {
                originalData[index] = {
                    ...originalData[index],
                    ...updates,
                    tanggalUpdate: new Date()
                };
                filterData(document.getElementById('searchInput')?.value || '');
            }
        },

        /**
         * Refresh table data
         * @param {Array} newData - New data array
         */
        refreshData: function(newData) {
            originalData = sortByDateDesc([...newData]);
            filterData(document.getElementById('searchInput')?.value || '');
        },

        /**
         * Get current filtered data
         * @returns {Array}
         */
        getData: function() {
            return [...filteredData];
        }
    };

    // ============================================
    // START APPLICATION
    // ============================================

    // Wait for DOM to be ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();

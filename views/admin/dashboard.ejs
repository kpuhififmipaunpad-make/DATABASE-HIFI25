<!DOCTYPE html>
<html lang="id">
<head>
  <%- include('partials/header') %>
  <style>
    body {
      background: linear-gradient(135deg, #1E3A8A 0%, #DC143C 100%);
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', sans-serif;
      position: relative;
      overflow-x: hidden;
    }
    
    /* Background Morphing Shapes */
    .bg-shape {
      position: fixed;
      border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
      opacity: 0.1;
      animation: morph 8s ease-in-out infinite;
      z-index: 0;
      pointer-events: none;
    }
    .bg-shape-1 { 
      width: 400px; height: 400px; 
      background: #DC143C; 
      top: -100px; left: -100px; 
      animation-delay: 0s; 
    }
    .bg-shape-2 { 
      width: 350px; height: 350px; 
      background: #1E3A8A; 
      bottom: -100px; right: -100px; 
      animation-delay: 2s; 
    }
    .bg-shape-3 { 
      width: 300px; height: 300px; 
      background: #3B82F6; 
      top: 50%; right: 10%; 
      animation-delay: 4s; 
    }
    
    @keyframes morph { 
      0%,100%{border-radius:60% 40% 30% 70%/60% 30% 70% 40%;} 
      50%{border-radius:30% 60% 70% 40%/50% 60% 30% 60%;} 
    }
    
    /* Particle Canvas */
    #particles-canvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 0;
      pointer-events: none;
    }
    
    .wrapper {
      display: flex;
      min-height: 100vh;
      position: relative;
      z-index: 1;
    }
    
    .content-wrapper {
      flex: 1;
      margin-left: 260px;
      padding: 80px 30px 30px;
      transition: all 0.3s ease;
      position: relative;
      z-index: 10;
    }
    
    .content-wrapper.expanded {
      margin-left: 80px;
    }
    
    .dashboard-header {
      margin-bottom: 40px;
      animation: fadeInUp 0.6s ease-out;
    }
    
    .page-title {
      font-size: 32px;
      font-weight: 700;
      color: white;
      margin-bottom: 8px;
      text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }
    
    .page-subtitle {
      color: rgba(255, 255, 255, 0.8);
      font-size: 16px;
    }
    
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 24px;
      margin-bottom: 40px;
    }
    
    .stat-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 20px;
      padding: 28px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
      border: 1px solid rgba(255, 255, 255, 0.3);
      transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
      position: relative;
      overflow: hidden;
    }
    
    .stat-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 4px;
      background: linear-gradient(90deg, #DC143C 0%, #1E3A8A 100%);
    }
    
    .stat-card:hover {
      transform: translateY(-8px) scale(1.02);
      box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
    }
    
    .stat-icon {
      width: 60px;
      height: 60px;
      border-radius: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 28px;
      margin-bottom: 16px;
      background: linear-gradient(135deg, #DC143C 0%, #1E3A8A 100%);
      color: white;
      box-shadow: 0 4px 15px rgba(220, 20, 60, 0.3);
    }
    
    .stat-value {
      font-size: 36px;
      font-weight: 700;
      color: #1F2937;
      margin-bottom: 8px;
    }
    
    .stat-label {
      color: #6B7280;
      font-size: 14px;
      font-weight: 500;
    }
    
    .table-container {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 24px;
      padding: 32px;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      border: 1px solid rgba(255, 255, 255, 0.3);
      animation: fadeInUp 1s ease-out;
    }
    
    .table-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 24px;
      flex-wrap: wrap;
      gap: 16px;
    }
    
    .table-title {
      font-size: 24px;
      font-weight: 700;
      background: linear-gradient(135deg, #DC143C 0%, #1E3A8A 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }
    
    .table-actions {
      display: flex;
      gap: 12px;
      flex-wrap: wrap;
    }
    
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @media (max-width: 768px) {
      .content-wrapper {
        margin-left: 0;
        padding: 80px 15px 20px;
      }
      
      .stats-grid {
        grid-template-columns: 1fr;
      }
      
      .table-container {
        padding: 20px;
        overflow-x: auto;
      }
      
      .table-header {
        flex-direction: column;
        align-items: flex-start;
      }
    }
  </style>
</head>
<body>
  <!-- Background Shapes -->
  <div class="bg-shape bg-shape-1"></div>
  <div class="bg-shape bg-shape-2"></div>
  <div class="bg-shape bg-shape-3"></div>
  
  <!-- Particle Canvas -->
  <canvas id="particles-canvas"></canvas>
  
  <div class="wrapper">
    <%- include('partials/sidebar') %>
    <%- include('partials/navbar') %>
    
    <div class="content-wrapper">
      <!-- Dashboard Header -->
      <div class="dashboard-header">
        <h1 class="page-title">Dashboard Admin</h1>
        <p class="page-subtitle">Selamat datang, <%= nama %>!</p>
      </div>
      
      <!-- Alert Messages -->
      <%- include('partials/message', {message: alert.message, status: alert.status}) %>
      
      <!-- Statistics Cards -->
      <div class="stats-grid">
        <div class="stat-card" data-tilt>
          <div class="stat-icon">
            <i class="fas fa-users"></i>
          </div>
          <div class="stat-value" data-counter="<%= count.user %>">0</div>
          <div class="stat-label">Total Anggota</div>
        </div>
        
        <div class="stat-card" data-tilt>
          <div class="stat-icon">
            <i class="fas fa-user-shield"></i>
          </div>
          <div class="stat-value" data-counter="<%= admin.length %>">0</div>
          <div class="stat-label">Administrator</div>
        </div>
        
        <div class="stat-card" data-tilt>
          <div class="stat-icon">
            <i class="fas fa-user-check"></i>
          </div>
          <div class="stat-value" data-counter="<%= count.user - admin.length %>">0</div>
          <div class="stat-label">Anggota Aktif</div>
        </div>
        
        <div class="stat-card" data-tilt>
          <div class="stat-icon">
            <i class="fas fa-chart-line"></i>
          </div>
          <div class="stat-value">100%</div>
          <div class="stat-label">Database Aktif</div>
        </div>
      </div>
      
      <!-- Data Table -->
      <div class="table-container">
        <div class="table-header">
          <h2 class="table-title">
            <i class="fas fa-table"></i>
            Data Warga HIFI
          </h2>
        </div>
        
        <%- include('partials/table', {users: users}) %>
      </div>
    </div>
  </div>
  
  <!-- Scripts -->
  <%- include('partials/script') %>
  
  <script src="/javascript/animations.js"></script>
  <script src="/javascript/admin-animations.js"></script>
  
  <script>
    // Particle Animation
    (function() {
      const canvas = document.getElementById('particles-canvas');
      if (!canvas) return;
      
      const ctx = canvas.getContext('2d');
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      
      const particles = [];
      const particleCount = 80;
      
      class Particle {
        constructor() {
          this.x = Math.random() * canvas.width;
          this.y = Math.random() * canvas.height;
          this.size = Math.random() * 2 + 1;
          this.speedX = Math.random() * 0.5 - 0.25;
          this.speedY = Math.random() * 0.5 - 0.25;
          this.opacity = Math.random() * 0.5 + 0.2;
        }
        
        update() {
          this.x += this.speedX;
          this.y += this.speedY;
          
          if (this.x > canvas.width) this.x = 0;
          if (this.x < 0) this.x = canvas.width;
          if (this.y > canvas.height) this.y = 0;
          if (this.y < 0) this.y = canvas.height;
        }
        
        draw() {
          ctx.fillStyle = `rgba(255, 255, 255, ${this.opacity})`;
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
          ctx.fill();
        }
      }
      
      function init() {
        for (let i = 0; i < particleCount; i++) {
          particles.push(new Particle());
        }
      }
      
      function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        particles.forEach(particle => {
          particle.update();
          particle.draw();
        });
        
        // Connect particles
        for (let i = 0; i < particles.length; i++) {
          for (let j = i + 1; j < particles.length; j++) {
            const dx = particles[i].x - particles[j].x;
            const dy = particles[i].y - particles[j].y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < 120) {
              ctx.strokeStyle = `rgba(255, 255, 255, ${0.15 * (1 - distance / 120)})`;
              ctx.lineWidth = 1;
              ctx.beginPath();
              ctx.moveTo(particles[i].x, particles[i].y);
              ctx.lineTo(particles[j].x, particles[j].y);
              ctx.stroke();
            }
          }
        }
        
        requestAnimationFrame(animate);
      }
      
      init();
      animate();
      
      window.addEventListener('resize', () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      });
    })();
  </script>
</body>
</html>

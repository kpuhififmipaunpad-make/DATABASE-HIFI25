<!-- Page specific script: init DataTables sesuai header CDN -->
<script>
(() => {
  // ===== Utilities =====
  const libsReady = () =>
    !!window.jQuery && !!$.fn.DataTable && !!$.fn.dataTable && !!$.fn.dataTable.Buttons;

  const whenDOMReady = (cb) => {
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", cb, { once: true });
    } else cb();
  };

  // Poll pendek untuk nunggu CDN (karena semua <script> pakai defer)
  function bootWhenReady(fn, interval = 50) {
    const tryInit = () => (libsReady() ? fn() : setTimeout(tryInit, interval));
    tryInit();
  }

  const debounce = (fn, wait = 160) => {
    let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), wait); };
  };

  // Format waktu relatif (display), tapi sort/export tetap ISO
  function formatRelativeTime(dateString) {
    if (!dateString) return 'Tidak pernah';
    const d = new Date(dateString);
    if (isNaN(d.getTime())) return '—';
    const now = new Date();
    const diffSec = Math.floor((now - d) / 1000);
    const abs = Math.abs(diffSec);
    const units = [
      ["tahun", 365*24*3600],
      ["bulan", 30*24*3600],
      ["hari", 24*3600],
      ["jam", 3600],
      ["menit", 60],
      ["detik", 1],
    ];
    for (const [name, sec] of units) {
      const v = Math.floor(abs / sec);
      if (v >= 1) return (diffSec >= 0) ? `${v} ${name} yang lalu` : `dalam ${v} ${name}`;
    }
    return "baru saja";
  }

  // Normalisasi tanggal ke ISO utk sort/export stabil
  function normalizeToISO(s) {
    if (!s) return null;
    const d1 = new Date(s);
    if (!isNaN(d1.getTime())) return d1.toISOString();
    // fallback dd/mm/yyyy hh:mm(:ss)
    const m = String(s).match(
      /^(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{2,4})(?:\s+(\d{1,2}):(\d{2})(?::(\d{2}))?)?$/
    );
    if (m) {
      const [_, dd, mm, yyyy, HH="00", MM="00", SS="00"] = m;
      const year = yyyy.length === 2 ? Number("20" + yyyy) : Number(yyyy);
      const iso = new Date(year, Number(mm)-1, Number(dd), Number(HH), Number(MM), Number(SS));
      if (!isNaN(iso.getTime())) return iso.toISOString();
    }
    return null;
  }

  // Bersihkan nomor HP utk sort/export (hanya digit + '+')
  function normalizePhone(text) {
    if (!text) return "";
    const only = String(text).replace(/[^0-9+]/g, "");
    // pastikan '+' tetap di depan bila ada
    return only.replace(/(.*)\+/g, "+$1");
  }

  whenDOMReady(() => {
    bootWhenReady(() => {
      const $table = $("#usersTable");
      if (!$table.length) return;

      const dt = $table.DataTable({
        responsive: true,
        autoWidth: false,
        lengthChange: true,         // items per page
        paging: true,
        ordering: true,
        searching: false,           // kita pakai search bar custom (#tableSearch)
        pageLength: 10,
        lengthMenu: [[10, 20, 30, 40, 50, -1], [10, 20, 30, 40, 50, "All"]],

        // DOM CDN (tanpa Bootstrap): B = Buttons, l = length, r, t, i = info, p = pagination
        dom: "Blrtip",

        // Export: Excel, PDF, Print
        buttons: [
          {
            extend: "excelHtml5",
            title: "Users",
            exportOptions: { columns: ":not(.no-export)", format: { body: exportBody } }
          },
          {
            extend: "pdfHtml5",
            title: "Users",
            orientation: "landscape",
            pageSize: "A4",
            exportOptions: { columns: ":not(.no-export)", format: { body: exportBody } }
          },
          {
            extend: "print",
            title: "Users",
            exportOptions: { columns: ":not(.no-export)", format: { body: exportBody } }
          }
        ],

        // Kolom sesuai tabel: 0 No, 1 Username, 2 Nama, 3 NPM, 4 Email, 5 Phone, 6 Role, 7 Update, 8 Aksi
        order: [[0, "asc"]],

        columnDefs: [
          { targets: 0, width: 56, type: "num", className: "dt-center" }, // No
          { targets: 6, className: "dt-center" },                          // Role

          // Phone Number (index 5): sort/export gunakan angka bersih
          {
            targets: 5,
            render: function (data, type) {
              const text = (data || "").toString();
              if (type === "sort" || type === "type" || type === "export") return normalizePhone(text);
              return text; // display apa adanya
            }
          },

          // Terakhir Update (index 7): display relatif; sort/export pakai ISO
          {
            targets: 7,
            render: function (data, type, row, meta) {
              // Ambil dari atribut data-rawtime (jika ada), fallback ke isi sel
              const cell = dt.cell(meta.row, meta.col).node();
              const rawAttr = cell && cell.getAttribute ? cell.getAttribute("data-rawtime") : null;
              const raw = (rawAttr || data || "").toString().trim();
              const iso = normalizeToISO(raw) || raw || "";

              if (type === "display") {
                const title = iso ? new Date(iso).toLocaleString() : "";
                const rel = iso ? formatRelativeTime(iso) : "—";
                return `<time datetime="${iso}" title="${title}">${rel}</time>`;
              }
              return iso; // sort/export
            }
          }
        ],

        drawCallback: function () {
          // Refresh teks relatif setiap redraw
          $table.find("time[datetime]").each(function () {
            const iso = this.getAttribute("datetime");
            if (iso) this.textContent = formatRelativeTime(iso);
          });
        }
      });

      // DOM "B" sudah me-render Buttons di atas tabel, jadi tidak perlu appendTo wrapper bootstrap.

      // Search bar custom (#tableSearch di table.ejs)
      const $search = $("#tableSearch");
      if ($search.length) {
        $search.on("input", debounce(function () {
          dt.search(this.value).draw();
        }, 200));
      }

      // Formatter isi saat export (Excel/PDF/Print)
      function exportBody(data, row, col, node) {
        if (!node) return data;

        // Ambil ISO dari <time> untuk kolom tanggal
        const time = node.querySelector && node.querySelector("time[datetime]");
        if (time) return time.getAttribute("datetime") || "";

        // Phone number: angka bersih
        if (col === 5) return normalizePhone(node.textContent || data || "");

        // Default: gunakan text content
        return (node.textContent || data || "").trim();
      }
    });
  });
})();
</script>

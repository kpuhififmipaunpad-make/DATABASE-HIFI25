<script>
// ==================== CONFIGURATION ====================
const API_CONFIG = {
    baseURL: '/api',
    endpoints: {
        devices: '/devices',
        search: '/devices/search',
        update: '/devices/update'
    },
    timeout: 5000
};

// ==================== STATE MANAGEMENT ====================
let deviceData = [];
let filteredData = [];
let currentSortColumn = 'lastUpdate';
let currentSortOrder = 'desc';
let searchTimeout = null;

// ==================== INITIALIZATION ====================
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

async function initializeApp() {
    try {
        showLoadingState();
        await loadDeviceData();
        initializeEventListeners();
        renderTable();
        hideLoadingState();
    } catch (error) {
        console.error('Initialization error:', error);
        showError('Gagal memuat data. Silakan refresh halaman.');
    }
}

// ==================== DATA LOADING ====================
async function loadDeviceData() {
    try {
        const response = await fetch(API_CONFIG.baseURL + API_CONFIG.endpoints.devices, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: API_CONFIG.timeout
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        // Validate and sort data by last update (newest first)
        deviceData = validateAndSortData(data);
        filteredData = [...deviceData];
        
        return deviceData;
    } catch (error) {
        console.error('Load device data error:', error);
        throw error;
    }
}

function validateAndSortData(data) {
    if (!Array.isArray(data)) {
        console.warn('Invalid data format, returning empty array');
        return [];
    }

    // Validate and enrich each device
    const validatedData = data.map(device => ({
        id: device.id || generateId(),
        name: device.name || 'Unknown Device',
        type: device.type || 'N/A',
        status: device.status || 'offline',
        power: validatePower(device.power),
        lastUpdate: validateDate(device.lastUpdate),
        location: device.location || 'Unknown',
        rawUpdateTime: device.lastUpdate
    }));

    // Sort by lastUpdate (newest first)
    return validatedData.sort((a, b) => {
        const dateA = new Date(a.rawUpdateTime);
        const dateB = new Date(b.rawUpdateTime);
        return dateB - dateA; // Descending order
    });
}

function validatePower(power) {
    const parsed = parseFloat(power);
    return isNaN(parsed) ? 0 : Math.max(0, parsed);
}

function validateDate(dateString) {
    if (!dateString) return 'Never';
    
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return 'Invalid Date';
    
    const now = new Date();
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffMins < 1) return 'Just now';
    if (diffMins < 60) return `${diffMins} min ago`;
    if (diffHours < 24) return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
    if (diffDays < 7) return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
    
    return date.toLocaleDateString('id-ID', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function generateId() {
    return 'dev_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

// ==================== EVENT LISTENERS ====================
function initializeEventListeners() {
    // Search input with debounce
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('input', handleSearch);
        searchInput.addEventListener('keyup', function(e) {
            if (e.key === 'Escape') {
                this.value = '';
                handleSearch();
            }
        });
    }

    // Refresh button
    const refreshBtn = document.getElementById('refreshBtn');
    if (refreshBtn) {
        refreshBtn.addEventListener('click', handleRefresh);
    }

    // Sort buttons
    document.querySelectorAll('[data-sort]').forEach(btn => {
        btn.addEventListener('click', handleSort);
    });

    // Filter buttons
    document.querySelectorAll('[data-filter]').forEach(btn => {
        btn.addEventListener('click', handleFilter);
    });
}

// ==================== SEARCH FUNCTIONALITY (FIXED) ====================
function handleSearch(event) {
    clearTimeout(searchTimeout);
    
    searchTimeout = setTimeout(() => {
        const searchTerm = event.target.value.toLowerCase().trim();
        
        if (searchTerm === '') {
            filteredData = [...deviceData];
        } else {
            filteredData = deviceData.filter(device => {
                return (
                    device.name.toLowerCase().includes(searchTerm) ||
                    device.type.toLowerCase().includes(searchTerm) ||
                    device.location.toLowerCase().includes(searchTerm) ||
                    device.status.toLowerCase().includes(searchTerm) ||
                    device.id.toLowerCase().includes(searchTerm)
                );
            });
        }
        
        renderTable();
        updateSearchStats(searchTerm);
    }, 300); // Debounce 300ms
}

function updateSearchStats(searchTerm) {
    const statsEl = document.getElementById('searchStats');
    if (statsEl) {
        if (searchTerm) {
            statsEl.textContent = `Found ${filteredData.length} of ${deviceData.length} devices`;
            statsEl.style.display = 'block';
        } else {
            statsEl.style.display = 'none';
        }
    }
}

// ==================== SORT FUNCTIONALITY ====================
function handleSort(event) {
    const column = event.currentTarget.dataset.sort;
    
    if (currentSortColumn === column) {
        currentSortOrder = currentSortOrder === 'asc' ? 'desc' : 'asc';
    } else {
        currentSortColumn = column;
        currentSortOrder = 'asc';
    }

    sortData(column, currentSortOrder);
    renderTable();
    updateSortIndicators();
}

function sortData(column, order) {
    filteredData.sort((a, b) => {
        let valA = a[column];
        let valB = b[column];

        // Handle different data types
        if (column === 'power') {
            valA = parseFloat(valA) || 0;
            valB = parseFloat(valB) || 0;
        } else if (column === 'lastUpdate') {
            valA = new Date(a.rawUpdateTime).getTime();
            valB = new Date(b.rawUpdateTime).getTime();
        } else {
            valA = String(valA).toLowerCase();
            valB = String(valB).toLowerCase();
        }

        if (valA < valB) return order === 'asc' ? -1 : 1;
        if (valA > valB) return order === 'asc' ? 1 : -1;
        return 0;
    });
}

function updateSortIndicators() {
    document.querySelectorAll('[data-sort]').forEach(btn => {
        const icon = btn.querySelector('.sort-icon');
        if (icon) {
            if (btn.dataset.sort === currentSortColumn) {
                icon.textContent = currentSortOrder === 'asc' ? '‚ñ≤' : '‚ñº';
                btn.classList.add('active-sort');
            } else {
                icon.textContent = '‚áÖ';
                btn.classList.remove('active-sort');
            }
        }
    });
}

// ==================== FILTER FUNCTIONALITY ====================
function handleFilter(event) {
    const filterType = event.currentTarget.dataset.filter;
    
    document.querySelectorAll('[data-filter]').forEach(btn => {
        btn.classList.remove('active');
    });
    event.currentTarget.classList.add('active');

    if (filterType === 'all') {
        filteredData = [...deviceData];
    } else {
        filteredData = deviceData.filter(device => device.status === filterType);
    }

    renderTable();
}

// ==================== TABLE RENDERING (STABLE) ====================
function renderTable() {
    const tbody = document.getElementById('deviceTableBody');
    if (!tbody) return;

    // Preserve scroll position
    const container = tbody.closest('.table-container');
    const scrollPos = container ? container.scrollTop : 0;

    if (filteredData.length === 0) {
        tbody.innerHTML = `
            <tr class="no-data-row">
                <td colspan="6" class="no-data-cell">
                    <div class="no-data-message">
                        <span class="no-data-icon">üîç</span>
                        <p>No devices found</p>
                    </div>
                </td>
            </tr>
        `;
        return;
    }

    // Render rows without changing structure
    tbody.innerHTML = filteredData.map((device, index) => `
        <tr class="device-row" data-device-id="${device.id}" data-index="${index}">
            <td class="cell-name">
                <div class="device-name-wrapper">
                    <span class="device-icon">${getDeviceIcon(device.type)}</span>
                    <span class="device-name">${escapeHtml(device.name)}</span>
                </div>
            </td>
            <td class="cell-type">${escapeHtml(device.type)}</td>
            <td class="cell-status">
                <span class="status-badge status-${device.status}">
                    <span class="status-dot"></span>
                    ${escapeHtml(device.status)}
                </span>
            </td>
            <td class="cell-power">
                <span class="power-value">${device.power.toFixed(2)}</span>
                <span class="power-unit">W</span>
            </td>
            <td class="cell-update">
                <span class="update-time" title="${escapeHtml(device.rawUpdateTime)}">
                    ${escapeHtml(device.lastUpdate)}
                </span>
            </td>
            <td class="cell-actions">
                <div class="action-buttons">
                    <button class="btn-action btn-view" onclick="viewDevice('${device.id}')" title="View Details">
                        üëÅÔ∏è
                    </button>
                    <button class="btn-action btn-edit" onclick="editDevice('${device.id}')" title="Edit">
                        ‚úèÔ∏è
                    </button>
                </div>
            </td>
        </tr>
    `).join('');

    // Restore scroll position
    if (container) {
        container.scrollTop = scrollPos;
    }

    // Update stats
    updateTableStats();
}

function updateTableStats() {
    const totalEl = document.getElementById('totalDevices');
    const activeEl = document.getElementById('activeDevices');
    
    if (totalEl) totalEl.textContent = deviceData.length;
    if (activeEl) {
        const activeCount = deviceData.filter(d => d.status === 'online').length;
        activeEl.textContent = activeCount;
    }
}

// ==================== UTILITY FUNCTIONS ====================
function getDeviceIcon(type) {
    const icons = {
        'sensor': 'üì°',
        'camera': 'üì∑',
        'light': 'üí°',
        'thermostat': 'üå°Ô∏è',
        'lock': 'üîí',
        'switch': 'üîå',
        'fan': 'üåÄ',
        'default': 'üì±'
    };
    return icons[type.toLowerCase()] || icons.default;
}

function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return String(text).replace(/[&<>"']/g, m => map[m]);
}

function showLoadingState() {
    const tbody = document.getElementById('deviceTableBody');
    if (tbody) {
        tbody.innerHTML = `
            <tr>
                <td colspan="6" class="loading-cell">
                    <div class="loading-spinner"></div>
                    <p>Loading devices...</p>
                </td>
            </tr>
        `;
    }
}

function hideLoadingState() {
    // Loading removed by renderTable()
}

function showError(message) {
    const tbody = document.getElementById('deviceTableBody');
    if (tbody) {
        tbody.innerHTML = `
            <tr>
                <td colspan="6" class="error-cell">
                    <div class="error-message">
                        <span class="error-icon">‚ö†Ô∏è</span>
                        <p>${escapeHtml(message)}</p>
                        <button onclick="location.reload()" class="btn-retry">Retry</button>
                    </div>
                </td>
            </tr>
        `;
    }
}

async function handleRefresh() {
    try {
        const btn = document.getElementById('refreshBtn');
        if (btn) {
            btn.disabled = true;
            btn.classList.add('refreshing');
        }

        await loadDeviceData();
        
        // Re-apply current search
        const searchInput = document.getElementById('searchInput');
        if (searchInput && searchInput.value) {
            handleSearch({ target: searchInput });
        } else {
            renderTable();
        }

        if (btn) {
            setTimeout(() => {
                btn.disabled = false;
                btn.classList.remove('refreshing');
            }, 1000);
        }
    } catch (error) {
        console.error('Refresh error:', error);
        showError('Failed to refresh data');
    }
}

// ==================== DEVICE ACTIONS ====================
function viewDevice(deviceId) {
    const device = deviceData.find(d => d.id === deviceId);
    if (device) {
        alert(`Device Details:\n\nName: ${device.name}\nType: ${device.type}\nStatus: ${device.status}\nPower: ${device.power}W\nLast Update: ${device.lastUpdate}\nLocation: ${device.location}`);
    }
}

function editDevice(deviceId) {
    const device = deviceData.find(d => d.id === deviceId);
    if (device) {
        const newName = prompt('Enter new device name:', device.name);
        if (newName && newName.trim()) {
            device.name = newName.trim();
            renderTable();
        }
    }
}

// ==================== AUTO REFRESH (Optional) ====================
let autoRefreshInterval = null;

function startAutoRefresh(intervalMs = 30000) {
    stopAutoRefresh();
    autoRefreshInterval = setInterval(() => {
        handleRefresh();
    }, intervalMs);
}

function stopAutoRefresh() {
    if (autoRefreshInterval) {
        clearInterval(autoRefreshInterval);
        autoRefreshInterval = null;
    }
}

// Uncomment to enable auto-refresh every 30 seconds
// startAutoRefresh(30000);
</script>

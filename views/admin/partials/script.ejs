<script>
(() => {
  // ===== helpers: tunggu jQuery + DataTables siap =====
  const libsReady = () =>
    !!window.jQuery &&
    !!$.fn.DataTable &&
    !!$.fn.dataTable &&
    !!$.fn.dataTable.Buttons;

  const whenDOMReady = (cb) => {
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", cb, { once: true });
    } else {
      cb();
    }
  };

  const debounce = (fn, wait = 160) => {
    let t;
    return (...args) => {
      clearTimeout(t);
      t = setTimeout(() => fn.apply(null, args), wait);
    };
  };

  // ===== FIX: FORMAT RELATIVE TIME UNTUK UPDATE TERAKHIR =====
  function formatRelativeTime(dateString) {
    if (!dateString) return 'Tidak pernah';
    
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return 'Invalid Date';
    
    const now = new Date();
    const diffMs = now - date;
    const diffSecs = Math.floor(diffMs / 1000);
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffSecs < 10) return 'Baru saja';
    if (diffSecs < 60) return `${diffSecs} detik lalu`;
    if (diffMins < 60) return `${diffMins} menit lalu`;
    if (diffHours < 24) return `${diffHours} jam lalu`;
    if (diffDays < 7) return `${diffDays} hari lalu`;
    
    return date.toLocaleDateString('id-ID', { 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  function boot() {
    if (!libsReady()) {
      console.error("jQuery/DataTables belum siap.");
      return;
    }
    const $table = $("#usersTable");
    if (!$table.length) return;

    // Bersihkan instance/handler lama kalau ada
    try {
      if ($.fn.DataTable.isDataTable($table)) {
        $table.DataTable().destroy(true);
      }
    } catch (_) {}
    $("#searchNama").off(".tbl");
    $("#itemsPerPage").off(".tbl");
    $("#btnRefresh").off(".tbl");
    $table.find("tbody").off(".tbl");

    // ===== FIX: UPDATE CELLS DENGAN RELATIVE TIME SEBELUM INIT =====
    $table.find("tbody tr").each(function() {
      const $tr = $(this);
      const rawTime = $tr.data('time') || $tr.attr('data-time');
      const $updateCell = $tr.find('td').eq(7); // Kolom "Terakhir Update"
      
      if ($updateCell.length && rawTime) {
        const formattedTime = formatRelativeTime(rawTime);
        $updateCell.text(formattedTime);
        $updateCell.attr('title', new Date(rawTime).toLocaleString('id-ID'));
        $updateCell.attr('data-time', rawTime);
        
        // Set data-order untuk sorting yang benar
        const ts = new Date(rawTime).getTime();
        $updateCell.attr('data-order', Number.isFinite(ts) ? String(ts) : '-1');
      }
    });

    // Inisialisasi DataTable
    const dt = $table.DataTable({
      // Stabilitas layout
      autoWidth: false,
      scrollX: true,
      scrollCollapse: true,
      deferRender: true,

      // UX
      responsive: false,
      lengthChange: false,
      searching: true, // ✅ FIX: ENABLE SEARCHING
      pagingType: "simple_numbers",
      pageLength: 10,

      // ✅ FIX: DEFAULT SORT BERDASARKAN UPDATE TERBARU (kolom 7 descending)
      order: [[7, 'desc']],

      dom: "Bt<'dt-bottom'ip>",

      columnDefs: [
        { targets: 0, width: 64, type: "num", className: "dt-col-no dt-center" },
        { targets: 6, width: 120, className: "dt-center" },
        {
          targets: 7, // ✅ FIX: Terakhir Update dengan sorting yang benar
          type: "num",
          render: function(data, type, row, meta) {
            const $cell = $table.find('tbody tr').eq(meta.row).find('td').eq(7);
            const rawTime = $cell.attr('data-time');
            
            if (type === 'sort' || type === 'type') {
              const ts = rawTime ? new Date(rawTime).getTime() : -1;
              return ts;
            }
            
            if (type === 'display') {
              return rawTime ? formatRelativeTime(rawTime) : 'Tidak pernah';
            }
            
            return data;
          }
        },
        { targets: 8, width: 120, orderable: false, className: "no-detail dt-center" }
      ],

      language: {
        paginate: { first: "«", previous: "‹", next: "›", last: "»" },
        info: "Menampilkan _START_ - _END_ dari _TOTAL_ data",
        infoEmpty: "Tidak ada data",
        infoFiltered: "(disaring dari _MAX_ total data)",
        zeroRecords: "Data tidak ditemukan",
        emptyTable: "Tidak ada data tersedia"
      },

      buttons: [
        {
          extend: "excel",
          text: '<i class="fas fa-file-excel"></i> Excel',
          className: "dt-btn-green",
          title: "Data Warga HIFI",
          exportOptions: { columns: [0,1,2,3,4,5,6,7] }
        },
        {
          extend: "pdf",
          text: '<i class="fas fa-file-pdf"></i> PDF',
          className: "dt-btn-green",
          title: "Data Warga HIFI",
          orientation: "landscape",
          exportOptions: { columns: [0,1,2,3,4,5,6,7] }
        },
        {
          extend: "print",
          text: '<i class="fas fa-print"></i> Print',
          className: "dt-btn-green",
          title: "Data Warga HIFI",
          exportOptions: { columns: [0,1,2,3,4,5,6,7] }
        }
      ],

      initComplete: function () {
        const api = this.api();
        api.columns.adjust();
        requestAnimationFrame(() => api.columns.adjust());
        setTimeout(() => api.columns.adjust(), 120);

        const $holder = $("#exportButtons");
        if ($holder.length) {
          $holder.empty();
          api.buttons().container().appendTo($holder);
        } else {
          api.buttons().container().insertBefore($table);
        }
      },

      drawCallback: function () {
        const api = this.api();
        api.columns.adjust();
        requestAnimationFrame(() => api.columns.adjust());
        
        // ✅ FIX: Update relative times setelah draw
        $table.find('tbody tr').each(function() {
          const $updateCell = $(this).find('td').eq(7);
          const rawTime = $updateCell.attr('data-time');
          if (rawTime) {
            $updateCell.text(formatRelativeTime(rawTime));
          }
        });
      }
    });

    // ✅ FIX: SEARCH BERFUNGSI DI SEMUA KOLOM
    const onSearch = debounce(function () {
      const val = this.value || "";
      dt.search(val).draw(); // Search di semua kolom, bukan hanya kolom 2
      dt.columns.adjust();
      requestAnimationFrame(() => dt.columns.adjust());
    }, 140);
    $("#searchNama").on("input.tbl", onSearch);

    // ======== Items per page ========
    $("#itemsPerPage").on("change.tbl", function () {
      const v = parseInt(this.value, 10);
      dt.page.len(v === -1 ? -1 : v).draw(false);
      dt.columns.adjust();
      requestAnimationFrame(() => dt.columns.adjust());
      setTimeout(() => dt.columns.adjust(), 0);
    });

    // ======== Refresh ========
    $("#btnRefresh").on("click.tbl", function () {
      const $i = $(this).find("i");
      $i.addClass("fa-spin");
      setTimeout(() => location.reload(), 280);
    });

    // ======== Row detail (klik baris) ========
    $table.find("tbody")
      .on("click.tbl", "tr.clickable-row td:not(.no-detail)", function (e) {
        if ($(e.target).closest(".btn-action,button,a,form").length) return;
        const $tr  = $(this).closest("tr.clickable-row");
        const row  = dt.row($tr);
        const ds   = $tr.get(0).dataset;

        if (row.child.isShown()) {
          row.child.hide();
          $tr.removeClass("shown");
        } else {
          dt.rows().every(function () {
            if (this.child && this.child.isShown && this.child.isShown()) {
              this.child.hide();
              $(this.node()).removeClass("shown");
            }
          });
          row.child(buildDetail(ds)).show();
          $tr.addClass("shown");
          dt.columns.adjust();
          requestAnimationFrame(() => dt.columns.adjust());
        }
      });

    // ======== Stabilkan saat resize / tab berubah ========
    window.addEventListener("resize", debounce(() => {
      dt.columns.adjust();
    }, 120));

    document.addEventListener("shown.bs.tab", () => {
      dt.columns.adjust();
      requestAnimationFrame(() => dt.columns.adjust());
    });
    document.addEventListener("shown.bs.collapse", () => {
      dt.columns.adjust();
      requestAnimationFrame(() => dt.columns.adjust());
    });

    // ✅ FIX: AUTO-UPDATE RELATIVE TIMES SETIAP MENIT
    setInterval(() => {
      $table.find('tbody tr').each(function() {
        const $updateCell = $(this).find('td').eq(7);
        const rawTime = $updateCell.attr('data-time');
        if (rawTime) {
          $updateCell.text(formatRelativeTime(rawTime));
        }
      });
    }, 60000);

    // Ekspos kecil untuk debug
    window.__HIFI__ = window.__HIFI__ || {};
    window.__HIFI__.usersTableInited = true;
    window.__HIFI__.usersDT = dt;

    console.log("✅ DataTable initialized. rows:", dt.rows().count(), "pageLen:", dt.page.len());
  }

  // Tunggu library siap
  (function waitLibs(tries = 0) {
    if (libsReady()) return whenDOMReady(boot);
    if (tries > 120) return console.error("Gagal memuat DataTables/Buttons.");
    setTimeout(() => waitLibs(tries + 1), 50);
  })();
})();
</script>
